/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as loggedInRouteRouteImport } from './routes/(loggedIn)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as loggedInOrgsRouteImport } from './routes/(loggedIn)/orgs'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as loggedInOrgOrgIdIndexRouteImport } from './routes/(loggedIn)/org/$orgId/index'

const loggedInRouteRoute = loggedInRouteRouteImport.update({
  id: '/(loggedIn)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const loggedInOrgsRoute = loggedInOrgsRouteImport.update({
  id: '/orgs',
  path: '/orgs',
  getParentRoute: () => loggedInRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const loggedInOrgOrgIdIndexRoute = loggedInOrgOrgIdIndexRouteImport.update({
  id: '/org/$orgId/',
  path: '/org/$orgId/',
  getParentRoute: () => loggedInRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof loggedInRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/orgs': typeof loggedInOrgsRoute
  '/org/$orgId': typeof loggedInOrgOrgIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof loggedInRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/orgs': typeof loggedInOrgsRoute
  '/org/$orgId': typeof loggedInOrgOrgIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(loggedIn)': typeof loggedInRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(loggedIn)/orgs': typeof loggedInOrgsRoute
  '/(loggedIn)/org/$orgId/': typeof loggedInOrgOrgIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/orgs' | '/org/$orgId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/orgs' | '/org/$orgId'
  id:
    | '__root__'
    | '/'
    | '/(loggedIn)'
    | '/(auth)/login'
    | '/(loggedIn)/orgs'
    | '/(loggedIn)/org/$orgId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  loggedInRouteRoute: typeof loggedInRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(loggedIn)': {
      id: '/(loggedIn)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof loggedInRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(loggedIn)/orgs': {
      id: '/(loggedIn)/orgs'
      path: '/orgs'
      fullPath: '/orgs'
      preLoaderRoute: typeof loggedInOrgsRouteImport
      parentRoute: typeof loggedInRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(loggedIn)/org/$orgId/': {
      id: '/(loggedIn)/org/$orgId/'
      path: '/org/$orgId'
      fullPath: '/org/$orgId'
      preLoaderRoute: typeof loggedInOrgOrgIdIndexRouteImport
      parentRoute: typeof loggedInRouteRoute
    }
  }
}

interface loggedInRouteRouteChildren {
  loggedInOrgsRoute: typeof loggedInOrgsRoute
  loggedInOrgOrgIdIndexRoute: typeof loggedInOrgOrgIdIndexRoute
}

const loggedInRouteRouteChildren: loggedInRouteRouteChildren = {
  loggedInOrgsRoute: loggedInOrgsRoute,
  loggedInOrgOrgIdIndexRoute: loggedInOrgOrgIdIndexRoute,
}

const loggedInRouteRouteWithChildren = loggedInRouteRoute._addFileChildren(
  loggedInRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  loggedInRouteRoute: loggedInRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
